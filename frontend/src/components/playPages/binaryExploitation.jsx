import React, { useState, useEffect } from 'react';
import Navbar from "../Navbar/Navbar";
import Footer from "../Footer/Footer";
import { correct, uncorrect } from "../../assets/icons/index";

const ItemsComponent = () => {
  const [currentAssignmentId, setCurrentAssignmentId] = useState(null);
  const [answers, setAnswers] = useState({});
  const [inputValues, setInputValues] = useState({});
  const [assignments, setAssignments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [hints, setHints] = useState([]);
  const [hintIndex, setHintIndex] = useState(0);
  const [startTime, setStartTime] = useState(null);
  const [endTime, setEndTime] = useState(null);
  const [timeTaken, setTimeTaken] = useState({});

  useEffect(() => {
    const fetchItems = async () => {
      const url = "http://127.0.0.1:8000/api/assignments/modules/6/";
      try {
        const response = await fetch(url, {
          method: "GET",
          headers: { "Content-Type": "application/json" }
        });
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        setAssignments(data.assignments || []);
      } catch (error) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchItems();
  }, []);

  const handleSubmit = (e, id, correctAnswer) => {
    e.preventDefault();
    const userAnswer = inputValues[id];
    if (userAnswer === correctAnswer) {
      setAnswers(prevAnswers => ({ ...prevAnswers, [id]: true }));
      alert("Ответ правильный");
    } else {
      setAnswers(prevAnswers => ({ ...prevAnswers, [id]: false }));
      alert("Ответ неправильный");
    }
    const currentTime = new Date();
    setEndTime(currentTime);
    const timeDiff = Math.round((currentTime - startTime) / 1000);
    setTimeTaken(prevTimeTaken => ({ ...prevTimeTaken, [id]: timeDiff }));
  };

  const handleChange = (e, id) => {
    setInputValues({ ...inputValues, [id]: e.target.value });
  };

  const handleAssignmentClick = (id) => {
    setCurrentAssignmentId(id);
    const assignment = assignments.find(a => a.id === id);
    setHints(assignment.hints || []);
    setHintIndex(0);
    setStartTime(new Date());
  };

  const handleNextHint = () => {
    if (hintIndex < hints.length - 1) {
      setHintIndex(hintIndex + 1);
    }
  };

  const handleDownload = async (fileUrl) => {
    try {
      const response = await fetch(fileUrl);
      if (!response.ok) {
        throw new Error('Ошибка при загрузке файла');
      }
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.style.display = 'none';
      a.href = url;
      a.download = fileUrl.split('/').pop();
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
    } catch (error) {
      alert('Не удалось скачать файл');
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  const currentAssignment = assignments.find(assignment => assignment.id === currentAssignmentId);

  return (
    <>
      <Navbar />
      <div className="flex flex-wrap justify-between items-center mx-auto max-w-screen-xl font-['Montserrat'] mt-16">
        <div className="w-1/4">
        <h2 className='text-xl font-medium mb-6'>Assignments</h2>
           
            {assignments.map(assignment => (
             <button
             className="block px-4 py-2 text-base font-semibold text-white bg-gray-400 rounded-lg shadow-md mb-2"
           >
            {assignment.title}
           </button>
          ))}
        </div>
        <div className="w-3/4 border-black border-opacity-10 border-[1px] rounded-3xl shadow-xl">
            <p className='flex flex-row justify-center items-center h-[800px]'>Tasks will be available soon</p>
        </div>
      </div>
      <Footer />
    </>
  );
};

export default ItemsComponent;
